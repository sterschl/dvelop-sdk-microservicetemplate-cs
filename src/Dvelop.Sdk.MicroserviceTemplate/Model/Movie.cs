/*
 * Microservice template
 *
 * Mircoservice template with movie watchlist example
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Dvelop.Sdk.MicroserviceTemplate.Client.OpenAPIDateConverter;

namespace Dvelop.Sdk.MicroserviceTemplate.Model
{
    /// <summary>
    /// Movie
    /// </summary>
    [DataContract(Name = "Movie")]
    public partial class Movie : IEquatable<Movie>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Movie" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Movie() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Movie" /> class.
        /// </summary>
        /// <param name="id">Id of the movie (required).</param>
        /// <param name="name">Title of the movie (required).</param>
        /// <param name="genre">Genre of the movie (required).</param>
        /// <param name="director">Director of the movie (required).</param>
        /// <param name="actors">actors (required).</param>
        /// <param name="description">Description of the movie (required).</param>
        /// <param name="type">Type of the movie (required).</param>
        /// <param name="posterUri">Poster-Uri of the movie.</param>
        /// <param name="oscars">Number of oscars.</param>
        public Movie(string id = default(string), string name = default(string), string genre = default(string), string director = default(string), List<string> actors = default(List<string>), string description = default(string), string type = default(string), string posterUri = default(string), int oscars = default(int))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for Movie and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for Movie and cannot be null");
            }
            this.Name = name;
            // to ensure "genre" is required (not null)
            if (genre == null) {
                throw new ArgumentNullException("genre is a required property for Movie and cannot be null");
            }
            this.Genre = genre;
            // to ensure "director" is required (not null)
            if (director == null) {
                throw new ArgumentNullException("director is a required property for Movie and cannot be null");
            }
            this.Director = director;
            // to ensure "actors" is required (not null)
            if (actors == null) {
                throw new ArgumentNullException("actors is a required property for Movie and cannot be null");
            }
            this.Actors = actors;
            // to ensure "description" is required (not null)
            if (description == null) {
                throw new ArgumentNullException("description is a required property for Movie and cannot be null");
            }
            this.Description = description;
            // to ensure "type" is required (not null)
            if (type == null) {
                throw new ArgumentNullException("type is a required property for Movie and cannot be null");
            }
            this.Type = type;
            this.PosterUri = posterUri;
            this.Oscars = oscars;
        }

        /// <summary>
        /// Id of the movie
        /// </summary>
        /// <value>Id of the movie</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Title of the movie
        /// </summary>
        /// <value>Title of the movie</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Genre of the movie
        /// </summary>
        /// <value>Genre of the movie</value>
        [DataMember(Name = "genre", IsRequired = true, EmitDefaultValue = false)]
        public string Genre { get; set; }

        /// <summary>
        /// Director of the movie
        /// </summary>
        /// <value>Director of the movie</value>
        [DataMember(Name = "director", IsRequired = true, EmitDefaultValue = false)]
        public string Director { get; set; }

        /// <summary>
        /// Gets or Sets Actors
        /// </summary>
        [DataMember(Name = "actors", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Actors { get; set; }

        /// <summary>
        /// Description of the movie
        /// </summary>
        /// <value>Description of the movie</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Type of the movie
        /// </summary>
        /// <value>Type of the movie</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Poster-Uri of the movie
        /// </summary>
        /// <value>Poster-Uri of the movie</value>
        [DataMember(Name = "posterUri", EmitDefaultValue = false)]
        public string PosterUri { get; set; }

        /// <summary>
        /// Number of oscars
        /// </summary>
        /// <value>Number of oscars</value>
        [DataMember(Name = "oscars", EmitDefaultValue = false)]
        public int Oscars { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Movie {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Genre: ").Append(Genre).Append("\n");
            sb.Append("  Director: ").Append(Director).Append("\n");
            sb.Append("  Actors: ").Append(Actors).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PosterUri: ").Append(PosterUri).Append("\n");
            sb.Append("  Oscars: ").Append(Oscars).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Movie);
        }

        /// <summary>
        /// Returns true if Movie instances are equal
        /// </summary>
        /// <param name="input">Instance of Movie to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Movie input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Genre == input.Genre ||
                    (this.Genre != null &&
                    this.Genre.Equals(input.Genre))
                ) && 
                (
                    this.Director == input.Director ||
                    (this.Director != null &&
                    this.Director.Equals(input.Director))
                ) && 
                (
                    this.Actors == input.Actors ||
                    this.Actors != null &&
                    input.Actors != null &&
                    this.Actors.SequenceEqual(input.Actors)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.PosterUri == input.PosterUri ||
                    (this.PosterUri != null &&
                    this.PosterUri.Equals(input.PosterUri))
                ) && 
                (
                    this.Oscars == input.Oscars ||
                    this.Oscars.Equals(input.Oscars)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Genre != null)
                {
                    hashCode = (hashCode * 59) + this.Genre.GetHashCode();
                }
                if (this.Director != null)
                {
                    hashCode = (hashCode * 59) + this.Director.GetHashCode();
                }
                if (this.Actors != null)
                {
                    hashCode = (hashCode * 59) + this.Actors.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.PosterUri != null)
                {
                    hashCode = (hashCode * 59) + this.PosterUri.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Oscars.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
