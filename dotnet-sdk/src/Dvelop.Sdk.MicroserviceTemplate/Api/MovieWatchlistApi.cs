/*
 * Microservice template
 *
 * Mircoservice template with movie watchlist example
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Dvelop.Sdk.MicroserviceTemplate.Client;
using Dvelop.Sdk.MicroserviceTemplate.Model;

namespace Dvelop.Sdk.MicroserviceTemplate.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMovieWatchlistApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Return all movies
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Movie&gt;</returns>
        List<Movie> MoviesGet();

        /// <summary>
        /// Return all movies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Movie&gt;</returns>
        ApiResponse<List<Movie>> MoviesGetWithHttpInfo();
        /// <summary>
        /// Delete an movie by ID
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <returns></returns>
        void MoviesIdDelete(Guid id);

        /// <summary>
        /// Delete an movie by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MoviesIdDeleteWithHttpInfo(Guid id);
        /// <summary>
        /// Returns an movie by ID
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <returns>Movie</returns>
        Movie MoviesIdGet(Guid id);

        /// <summary>
        /// Returns an movie by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <returns>ApiResponse of Movie</returns>
        ApiResponse<Movie> MoviesIdGetWithHttpInfo(Guid id);
        /// <summary>
        /// Update an movie by ID
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <returns>Movie</returns>
        Movie MoviesIdPatch(Guid id, Movie movie);

        /// <summary>
        /// Update an movie by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <returns>ApiResponse of Movie</returns>
        ApiResponse<Movie> MoviesIdPatchWithHttpInfo(Guid id, Movie movie);
        /// <summary>
        /// Update an movie by ID
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <returns>Movie</returns>
        Movie MoviesIdPut(Guid id, Movie movie);

        /// <summary>
        /// Update an movie by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <returns>ApiResponse of Movie</returns>
        ApiResponse<Movie> MoviesIdPutWithHttpInfo(Guid id, Movie movie);
        /// <summary>
        /// Create a new movie
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="movie">Movie to storage</param>
        /// <returns>Movie</returns>
        Movie MoviesPost(Movie movie);

        /// <summary>
        /// Create a new movie
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="movie">Movie to storage</param>
        /// <returns>ApiResponse of Movie</returns>
        ApiResponse<Movie> MoviesPostWithHttpInfo(Movie movie);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMovieWatchlistApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Return all movies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Movie&gt;</returns>
        System.Threading.Tasks.Task<List<Movie>> MoviesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return all movies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Movie&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Movie>>> MoviesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an movie by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MoviesIdDeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an movie by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MoviesIdDeleteWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns an movie by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Movie</returns>
        System.Threading.Tasks.Task<Movie> MoviesIdGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns an movie by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        System.Threading.Tasks.Task<ApiResponse<Movie>> MoviesIdGetWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an movie by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Movie</returns>
        System.Threading.Tasks.Task<Movie> MoviesIdPatchAsync(Guid id, Movie movie, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an movie by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        System.Threading.Tasks.Task<ApiResponse<Movie>> MoviesIdPatchWithHttpInfoAsync(Guid id, Movie movie, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an movie by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Movie</returns>
        System.Threading.Tasks.Task<Movie> MoviesIdPutAsync(Guid id, Movie movie, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an movie by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        System.Threading.Tasks.Task<ApiResponse<Movie>> MoviesIdPutWithHttpInfoAsync(Guid id, Movie movie, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new movie
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="movie">Movie to storage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Movie</returns>
        System.Threading.Tasks.Task<Movie> MoviesPostAsync(Movie movie, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new movie
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="movie">Movie to storage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        System.Threading.Tasks.Task<ApiResponse<Movie>> MoviesPostWithHttpInfoAsync(Movie movie, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMovieWatchlistApi : IMovieWatchlistApiSync, IMovieWatchlistApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MovieWatchlistApi : IMovieWatchlistApi
    {
        private Dvelop.Sdk.MicroserviceTemplate.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MovieWatchlistApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MovieWatchlistApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MovieWatchlistApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MovieWatchlistApi(string basePath)
        {
            this.Configuration = Dvelop.Sdk.MicroserviceTemplate.Client.Configuration.MergeConfigurations(
                Dvelop.Sdk.MicroserviceTemplate.Client.GlobalConfiguration.Instance,
                new Dvelop.Sdk.MicroserviceTemplate.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Dvelop.Sdk.MicroserviceTemplate.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dvelop.Sdk.MicroserviceTemplate.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Dvelop.Sdk.MicroserviceTemplate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MovieWatchlistApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MovieWatchlistApi(Dvelop.Sdk.MicroserviceTemplate.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Dvelop.Sdk.MicroserviceTemplate.Client.Configuration.MergeConfigurations(
                Dvelop.Sdk.MicroserviceTemplate.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Dvelop.Sdk.MicroserviceTemplate.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Dvelop.Sdk.MicroserviceTemplate.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Dvelop.Sdk.MicroserviceTemplate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MovieWatchlistApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MovieWatchlistApi(Dvelop.Sdk.MicroserviceTemplate.Client.ISynchronousClient client, Dvelop.Sdk.MicroserviceTemplate.Client.IAsynchronousClient asyncClient, Dvelop.Sdk.MicroserviceTemplate.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Dvelop.Sdk.MicroserviceTemplate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Dvelop.Sdk.MicroserviceTemplate.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Dvelop.Sdk.MicroserviceTemplate.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Dvelop.Sdk.MicroserviceTemplate.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dvelop.Sdk.MicroserviceTemplate.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Return all movies 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Movie&gt;</returns>
        public List<Movie> MoviesGet()
        {
            Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<List<Movie>> localVarResponse = MoviesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return all movies 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Movie&gt;</returns>
        public Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<List<Movie>> MoviesGetWithHttpInfo()
        {
            Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions localVarRequestOptions = new Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Movie>>("/movies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoviesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return all movies 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Movie&gt;</returns>
        public async System.Threading.Tasks.Task<List<Movie>> MoviesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<List<Movie>> localVarResponse = await MoviesGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return all movies 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Movie&gt;)</returns>
        public async System.Threading.Tasks.Task<Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<List<Movie>>> MoviesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions localVarRequestOptions = new Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }



            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Movie>>("/movies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoviesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <returns></returns>
        public void MoviesIdDelete(Guid id)
        {
            MoviesIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Object> MoviesIdDeleteWithHttpInfo(Guid id)
        {
            Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions localVarRequestOptions = new Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/movies/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoviesIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MoviesIdDeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MoviesIdDeleteWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Object>> MoviesIdDeleteWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions localVarRequestOptions = new Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/movies/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoviesIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <returns>Movie</returns>
        public Movie MoviesIdGet(Guid id)
        {
            Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie> localVarResponse = MoviesIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <returns>ApiResponse of Movie</returns>
        public Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie> MoviesIdGetWithHttpInfo(Guid id)
        {
            Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions localVarRequestOptions = new Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Movie>("/movies/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoviesIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Movie</returns>
        public async System.Threading.Tasks.Task<Movie> MoviesIdGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie> localVarResponse = await MoviesIdGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        public async System.Threading.Tasks.Task<Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie>> MoviesIdGetWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions localVarRequestOptions = new Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Movie>("/movies/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoviesIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <returns>Movie</returns>
        public Movie MoviesIdPatch(Guid id, Movie movie)
        {
            Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie> localVarResponse = MoviesIdPatchWithHttpInfo(id, movie);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <returns>ApiResponse of Movie</returns>
        public Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie> MoviesIdPatchWithHttpInfo(Guid id, Movie movie)
        {
            // verify the required parameter 'movie' is set
            if (movie == null)
            {
                throw new Dvelop.Sdk.MicroserviceTemplate.Client.ApiException(400, "Missing required parameter 'movie' when calling MovieWatchlistApi->MoviesIdPatch");
            }

            Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions localVarRequestOptions = new Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = movie;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Movie>("/movies/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoviesIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Movie</returns>
        public async System.Threading.Tasks.Task<Movie> MoviesIdPatchAsync(Guid id, Movie movie, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie> localVarResponse = await MoviesIdPatchWithHttpInfoAsync(id, movie, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        public async System.Threading.Tasks.Task<Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie>> MoviesIdPatchWithHttpInfoAsync(Guid id, Movie movie, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'movie' is set
            if (movie == null)
            {
                throw new Dvelop.Sdk.MicroserviceTemplate.Client.ApiException(400, "Missing required parameter 'movie' when calling MovieWatchlistApi->MoviesIdPatch");
            }


            Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions localVarRequestOptions = new Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = movie;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Movie>("/movies/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoviesIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <returns>Movie</returns>
        public Movie MoviesIdPut(Guid id, Movie movie)
        {
            Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie> localVarResponse = MoviesIdPutWithHttpInfo(id, movie);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <returns>ApiResponse of Movie</returns>
        public Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie> MoviesIdPutWithHttpInfo(Guid id, Movie movie)
        {
            // verify the required parameter 'movie' is set
            if (movie == null)
            {
                throw new Dvelop.Sdk.MicroserviceTemplate.Client.ApiException(400, "Missing required parameter 'movie' when calling MovieWatchlistApi->MoviesIdPut");
            }

            Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions localVarRequestOptions = new Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = movie;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Movie>("/movies/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoviesIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Movie</returns>
        public async System.Threading.Tasks.Task<Movie> MoviesIdPutAsync(Guid id, Movie movie, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie> localVarResponse = await MoviesIdPutWithHttpInfoAsync(id, movie, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an movie by ID 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of movie</param>
        /// <param name="movie">Updated movie</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        public async System.Threading.Tasks.Task<Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie>> MoviesIdPutWithHttpInfoAsync(Guid id, Movie movie, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'movie' is set
            if (movie == null)
            {
                throw new Dvelop.Sdk.MicroserviceTemplate.Client.ApiException(400, "Missing required parameter 'movie' when calling MovieWatchlistApi->MoviesIdPut");
            }


            Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions localVarRequestOptions = new Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = movie;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Movie>("/movies/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoviesIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new movie 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="movie">Movie to storage</param>
        /// <returns>Movie</returns>
        public Movie MoviesPost(Movie movie)
        {
            Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie> localVarResponse = MoviesPostWithHttpInfo(movie);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new movie 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="movie">Movie to storage</param>
        /// <returns>ApiResponse of Movie</returns>
        public Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie> MoviesPostWithHttpInfo(Movie movie)
        {
            // verify the required parameter 'movie' is set
            if (movie == null)
            {
                throw new Dvelop.Sdk.MicroserviceTemplate.Client.ApiException(400, "Missing required parameter 'movie' when calling MovieWatchlistApi->MoviesPost");
            }

            Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions localVarRequestOptions = new Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = movie;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Movie>("/movies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoviesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new movie 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="movie">Movie to storage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Movie</returns>
        public async System.Threading.Tasks.Task<Movie> MoviesPostAsync(Movie movie, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie> localVarResponse = await MoviesPostWithHttpInfoAsync(movie, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new movie 
        /// </summary>
        /// <exception cref="Dvelop.Sdk.MicroserviceTemplate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="movie">Movie to storage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        public async System.Threading.Tasks.Task<Dvelop.Sdk.MicroserviceTemplate.Client.ApiResponse<Movie>> MoviesPostWithHttpInfoAsync(Movie movie, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'movie' is set
            if (movie == null)
            {
                throw new Dvelop.Sdk.MicroserviceTemplate.Client.ApiException(400, "Missing required parameter 'movie' when calling MovieWatchlistApi->MoviesPost");
            }


            Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions localVarRequestOptions = new Dvelop.Sdk.MicroserviceTemplate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Dvelop.Sdk.MicroserviceTemplate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = movie;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Movie>("/movies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoviesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
